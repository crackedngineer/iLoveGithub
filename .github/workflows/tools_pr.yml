name: Create Tool PR from Template Request

on:
  issues:
    types: [opened, edited]

jobs:
  create-tool-pr:
    if: contains(github.event.issue.labels.*.name, 'new-template-request')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Parse issue and check for duplicates
        id: parse
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const issueBody = context.payload.issue.body;

            console.log('Issue Body:', issueBody);
            
            // Parse issue form using field IDs
            const parseField = (label) => {
              const regex = new RegExp(`### ${label}\\s*([\\s\\S]*?)(?=###|$)`, 'i');
              const match = issueBody.match(regex);
              return match ? match[1].trim() : '';
            };
            
            // Extract fields using IDs from the issue form
            const toolName = parseField('Name');
            const toolTitle = parseField('Title');
            const toolDescription = parseField('Description');
            const toolHomepage = parseField('Homepage');
            const toolUrl = parseField('URL Pattern');
            const toolIcon = parseField('Icon URL');
            const toolCategory = parseField('Category');
            const toolIframe = parseField('iFrame Support');
            
            // Parse checkbox - GitHub renders checked boxes as "[X]" or "[x]"
            const iframeSupport = toolIframe.includes('[X]') || toolIframe.includes('[x]')

            const tool = {
              name: toolName.toLowerCase().replace(/\s+/g, '-'),
              title: toolTitle,
              description: toolDescription,
              homepage: toolHomepage,
              url: toolUrl,
              icon: toolIcon,
              category: toolCategory,
              iframe: iframeSupport,
              created_at: new Date().toISOString().split('T')[0]
            };
            
            // Check for duplicates
            const toolsPath = './tools.json';
            if (fs.existsSync(toolsPath)) {
              const tools = JSON.parse(fs.readFileSync(toolsPath, 'utf8'));
              const exists = tools.some(t => t.name === tool.name);
              
              if (exists) {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: `⚠️ **Tool Already Exists**\n\nA tool with the name \`${tool.name}\` already exists in the repository.\n\nPlease either:\n- Close this issue if it's a duplicate\n- Update the tool name to make it unique\n- Mention in this issue if you want to update the existing tool`
                });
                
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  labels: ['duplicate']
                });
                
                core.setFailed('Tool already exists');
                return;
              }
            }
            
            // Save tool data for next steps
            core.setOutput('tool_json', JSON.stringify(tool));
            core.setOutput('tool_name', tool.name);
            core.setOutput('branch_name', `add-tool-${tool.name}-${Date.now()}`);

      - name: Update tools.json
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const tool = JSON.parse('${{ steps.parse.outputs.tool_json }}');
            const toolsPath = './tools.json';
            
            // Read and update tools
            let tools = fs.existsSync(toolsPath) 
              ? JSON.parse(fs.readFileSync(toolsPath, 'utf8'))
              : [];
            
            tools.push(tool);
            tools.sort((a, b) => a.name.localeCompare(b.name));
            
            // Write updated file
            fs.writeFileSync(toolsPath, JSON.stringify(tools, null, 2) + '\n');

      - name: Create branch and commit
        if: success()
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git checkout -b ${{ steps.parse.outputs.branch_name }}
          git add tools.json
          git commit -m "Add ${{ steps.parse.outputs.tool_name }} tool

          Resolves #${{ github.event.issue.number }}"
          git push origin ${{ steps.parse.outputs.branch_name }}

      - name: Create Pull Request
        if: success()
        id: create_pr
        uses: actions/github-script@v7
        with:
          script: |
            const tool = JSON.parse('${{ steps.parse.outputs.tool_json }}');
            const branchName = '${{ steps.parse.outputs.branch_name }}';
            
            const pr = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Add ${tool.title} tool`,
              head: branchName,
              base: 'master',
              body: `## New Tool Addition\n\nThis PR adds a new tool based on the request in #${context.issue.number}.\n\n### Tool Details\n\`\`\`json\n${JSON.stringify(tool, null, 2)}\n\`\`\`\n\nCloses #${context.issue.number}`
            });
            
            return pr.data.number;

      - name: Update issue
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ steps.create_pr.outputs.result }};
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `🎉 Pull request created: #${prNumber}\n\nThe tool will be added once the PR is reviewed and merged.`
            });
            
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['pending-pr']
            });